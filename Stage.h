#pragma once

#pragma region ?????

#include <windows.h>
#include <stdlib.h>
#include <mmsystem.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>
#include <time.h>
#include <vector>
#include <math.h>
#include "resource.h"
#pragma comment(lib, "Msimg32.lib")            //??????????????????????TransparentBlt??
#pragma comment(lib, "winmm.lib")
using namespace std;
#pragma endregion

#pragma region ???

#define WINDOW_TITLEBARHEIGHT    32            //?????
#define WINDOW_WIDTH            896+16        //??????
#define WINDOW_HEIGHT            640+32        //??????

#define STAGE_STARTMENU            0        //?????ID
#define STAGE_1                    1        //????????ID
#define STAGE_2                    2
#define STAGE_3                3
#define STAGE_help                    10
#define STAGE_pause            11

//??
#define BG_BITMAP_WIDTH            998        //?????????
#define BG_BITMAP_HEIGHT        713     //?????????
#define BG_BITMAP_helpmap1_WIDTH 490 //?????????
#define BG_BITMAP_helpmap1_height 455 //?????????
#define BG_COLUMNS                28        //????
#define BG_ROWS                    20        //????
#define HUMAN_SIZE_X            50        //?????????
#define HUMAN_SIZE_Y            60        
#define HUMAN_BITMAP_SIZE_X        19        //?????????
#define HUMAN_BITMAP_SIZE_Y        26        
#define BLOCK_SIZE_X            32        //???????????
#define BLOCK_SIZE_Y            32        //???????????
#define BLOCK_BITMAP_SIZE_X        16        //??????????
#define BLOCK_BITMAP_SIZE_Y        16
#define BLOCK_BITMAP_SIZE_X2    32    //??????????
#define BLOCK_BITMAP_SIZE_Y2    32    
#define DIALOG_SIZE_X            896        //?????
#define DIALOG_SIZE_Y            120
#define DIALOG_BITMAP_SIZE_X    250
#define DIALOG_BITMAP_SIZE_Y    44
#define MOSTER_SIZE_X            60        //??
#define MOSTER_SIZE_Y            55
#define MOSTER_BITMAP_SIZE_X    20
#define MOSTER_BITMAP_SIZE_Y    17
#define ATTACK_SIZE_X            32
#define ATTACK_SIZE_Y            32
#define ATTACK_BITMAP_SIZE_X    22
#define ATTACK_BITMAP_SIZE_Y    22

//??????
#define UNIT_STATE_HOLD            0        //??
#define UNIT_STATE_WALK            1        //??
#define UNIT_STATE_ATTACK        2        //??

//??????
#define UNIT_DIRECT_RIGHT        1        //??
#define UNIT_DIRECT_LEFT        3        //??
#define UNIT_DIRECT_UP            2        //??
#define UNIT_DIRECT_DOWN        0        //??

//????
#define BUTTON_STARTGAME            1001    //??????ID
#define BUTTON_STARTGAME_WIDTH        212        //????????
#define BUTTON_STARTGAME_HEIGHT        76        //????????

#define BUTTON_HELP            1002    //??????ID
#define BUTTON_HELP_WIDTH        106        //????????
#define BUTTON_HELP_HEIGHT        38        //????????

#define BUTTON_pausebutton            1003    //??????ID
#define BUTTON_pausebutton_WIDTH        36    //????????
#define BUTTON_pausebutton_HEIGHT    36    //????????

#define BUTTON_restartb            1005    //??????ID
#define BUTTON_restartb_WIDTH        36    //????????
#define BUTTON_restartb_HEIGHT        36    //????????

#define BUTTON_returnb        1004    //??????ID
#define BUTTON_returnb_WIDTH        36    //????????
#define BUTTON_returnb_HEIGHT        36

#define BUTTON_returnb1        1006    //??????ID
#define BUTTON_returnb1_WIDTH        36    //????????
#define BUTTON_returnb1_HEIGHT        36

#define TIMER_GAMETIMER                1        //????????ID
#define TIMER_GAMETIMER_ELAPSE        30        //?????????????
#define UNIT_SPEED                    3.0        //??????

#define NPC_MAN1_ID                2001        //??NPC?ID?
#define NPC_WOMAN1_ID            2002

#define MONSTER_CAT_ID            3001
#define MONSTER_2               3002

#pragma endregion

#pragma region ?????

// ?????
struct Stage
{
    int stageID;        //????
    HBITMAP bg;            //????
    int timeCountDown;    //???????
    bool timerOn;        //????????????????
};

// ?????
struct Button
{
    int buttonID;    //????
    bool visible;    //??????
    HBITMAP img;    //??
    int x;            //??x
    int y;            //??y
    int width;        //??
    int height;        //??
};

// NPC???
struct NPC
{
    int npcID;                //NPC??
    HBITMAP img;            //??
    bool visible;            //?NPC????
    bool task_complete;        //?npc????????????npc???????????????

    int frame_row;            //????????????
    int frame_column;        //????????????

    int* frame_sequence;    //??????
    int frame_count;        //??????
    int frame_id;            //?????????????

    int state;        //????
    int direction;    //????

    int x;            //??x
    int y;            //??y
    double vx;        //??x
    double vy;        //??y
    int health;        //???

    vector<const wchar_t*> conversations_before;    //?????NPC???
    vector<const wchar_t*> conversations_after;        //?????NPC???
    int next_conversation_id;                //NPC??????????
};

// ?????
struct Player
{
    HBITMAP img;    //??
    int playerID;
    int frame_row;            //????????????
    int frame_column;        //????????????

    int* frame_sequence;    //??????
    int frame_count;        //??????
    int frame_id;            //?????????????

    int state;        //????
    int direction;    //????

    int x;            //??x
    int y;            //??y
    double vx;        //??x
    double vy;        //??y
    int health=3;        //???
};

// ?????
struct Monster
{
    int monsterID;            //????
    HBITMAP img;            //??
    HBITMAP img_attack;            //??
    int attack_x;
    bool visible;            //????
    bool task_complete;        //??????

    int frame_row;            //????????????
    int frame_column;        //????????????

    int* frame_sequence;    //??????
    int frame_count;        //??????
    int frame_id;            //?????????????

    int state;        //????
    int direction;    //????

    int x;            //??x
    int y;            //??y
    double vx;        //??x
    double vy;        //??y
    int health=3;        //???
    bool alive;        //????

    vector<const wchar_t*> conversations_before;    //????????
    vector<const wchar_t*> conversations_after;        //????????
    int next_conversation_id;                        //??????????
};

//TODO: ????????????????????

// ???????
struct Attack
{
    HBITMAP img;    //??

    int frame_row;            //????????????
    int frame_column;        //????????????

    int* frame_sequence;    //??????
    int frame_count;        //??????
    int frame_id;            //?????????????
    bool visible;            //??????

    int x;            //??x
    int y;            //??y
};

#pragma endregion

#pragma region ????????

// ?????????
void InitGame(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ??????????
void KeyDown(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ??????????
void KeyUp(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ??????????
void MouseMove(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ????????????
void LButtonDown(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ????????????
void LButtonUp(HWND hWnd, WPARAM wParam, LPARAM lParam);

// ?????????
void TimerUpdate(HWND hWnd, WPARAM wParam, LPARAM lParam);

#pragma endregion

#pragma region ????????????

// ??????
Button* CreateButton(int buttonID, HBITMAP img, int width, int height, int x, int y);

// ??????
Player* CreatePlayer(int x, int y);
NPC* CreateNPC(int x, int y, int npc_id);
Monster* CreateMonster(int x, int y, int monster_id);
Attack* CreateAttack();

// ???????
void InitStage(HWND hWnd, int stageID);

//????????update***???????????????handle***?????/???????
void UpdatePlayer(HWND hWnd);
void UpdateNPCs(HWND hWnd);
void UpdateMonsters(HWND hWnd);
void UpdateMaps(HWND hWnd);
void UpdateAttack(HWND hWnd);
void CheckBoundary(HWND hWnd);

void HandleConversationEvents(HWND hWnd);

//TODO: ???????????

#pragma endregion 

#pragma region ??????

// ????
void Paint(HWND hWnd);

#pragma endregion
